{
    "contents" : "library(shiny)\nlibrary(ggplot2)\nlibrary(reshape)\n\nN2p <- function(nSubj, rc=.1, nCond=2){\n  Fcut <- (rc*rc/(nCond-1))/((1-rc*rc)/(nSubj-nCond))\n  return( 1-pf(Fcut, nCond-1, nSubj-nCond) )\n}\n\nq2N <- function(q ,rc=.1, nCond=2){\n  nUpper <- nCond+1\n  p0 <- N2p(nUpper, rc, nCond)\n  if( p0 <= (1-q) ) return(NA)\n  while ( p0 > (1-q) ){\n    nUpper <- nUpper*10\n    p0 <-  N2p(nUpper, rc, nCond)\n  }\n  return(uniroot(function(N) {N2p(N, rc, nCond)-(1-q)}, lower = nCond+1, \n                              upper = nUpper, tol = 1e-9)$root)\n}\n\nshinyServer(function(input, output) {\n\n  output$PvsNPlot_N <- renderPlot({\n    rc <- input$rc_N\n    L <- input$L_N\n    if( L >= 2 ){\n      tt <- N2p(L+1, rc, L)\n      N2 <- ceiling(q2N(q=.99, rc=rc, L)/L)\n      dat <- data.frame(nSubj=L+1:N2, Prob=N2p((L+1:N2)*L, rc, L))\n      dat$nProb <- 1-dat$Prob\n      Nnow <- input$sliderInputN*L\n      if( length(Nnow)==0 ) Nnow=N2 \n      dat$Pass <- ifelse(dat$Prob<N2p(Nnow, rc, L), \n                         \"Probability of rxe >= rc\", \"Probability of rxe < rc\")\n      if( L >= 2){\n        ggplot(dat, aes(x=nSubj, y=nProb, Pass)) + \n          xlab(\"number of subjects in each condition\") + \n          ylab(\"the probability of successful randomization\") + \n          geom_point(aes(colour=Pass)) + \n          theme(text=element_text(family=\"NovaMono\", size=rel(3.5))) +\n          scale_color_manual(values = c(\"Probability of rxe >= rc\" = \"#00bfc4\", \n                                        \"Probability of rxe < rc\" = \"#f8766d\"), guide=F) \n      }else{\n        par(family=\"NovaMono\")\n        plot(1:10, 1:10, pch=\"\", bty=\"n\", yaxt=\"n\", xaxt=\"n\", ylab=\"\", xlab=\"\")\n        text(5, y=6, \"Probability cannot be calculated under\", cex=1.3)\n        text(5, y=5, \"this combination of parameters.\", cex=1.3)\n      }\n    }else{\n      par(family=\"NovaMono\")\n      plot(1:10, 1:10, bty=\"n\", xaxt=\"n\", yaxt=\"n\", pch=\"\", ylab=\"\", xlab=\"\")\n      text(5, y=6, \"Probability cannot be calculated under\", cex=1.3)\n      text(5, y=5, \"this combination of parameters.\", cex=1.3)\n    }\n  })\n  \n  output$sliderInputN <- renderUI({\n    if( input$L_N >= 2 ){\n      N.99 <- ceiling(q2N(q=.99, rc=input$rc_N, input$L_N)/input$L_N)\n      sliderInput(\"sliderInputN\", label=\"Number of subjects in each condition\", \n                  min=input$L_N+1, max=N.99, value=round((N.99-input$L_N-1)/2, 2))\n    }else{\n    }\n  })\n  \n  output$Prob <- renderText({\n    if( length(input$sliderInputN)==0 | input$L_N<2 ){\n    }else if( input$sliderInputN < input$L_N ){\n    }else{\n      round(1-N2p(input$sliderInputN*input$L_N, input$rc_N, input$L_N), 3)\n    }\n  })\n  \n  output$PvsNPlot_P <- renderPlot({\n    rc <- input$rc_P\n    L <- input$L_P\n    if( L >= 2 ){\n      tt <- N2p(L+1, rc, L)\n      N2 <- ceiling(q2N(q=.99, rc=rc, L)/L)\n      dat <- data.frame(nSubj=L+1:N2, Prob=N2p((L+1:N2)*L, rc, L))\n      dat$nProb <- 1-dat$Prob\n      Pnow <- input$sliderInputP\n      if( length(Pnow)==0 ) Pnow=mean(dat$nProb)\n      dat$Pass <- ifelse(dat$nSubj>q2N(q=Pnow, rc=rc, L)/L, \n                         \"Probability of rxe >= rc\", \"Probability of rxe < rc\")\n      if( L >= 2){\n        ggplot(dat, aes(y=nSubj, x=nProb, Pass)) + \n          ylab(\"number of subjects in each condition\") + \n          xlab(\"acceptable good-randomization rate\") + \n          geom_point(aes(colour=Pass)) + \n          theme(text=element_text(family=\"NovaMono\", size=rel(3.5))) + \n          scale_color_manual(values = c(\"Probability of rxe >= rc\" = \"#00bfc4\", \n                                        \"Probability of rxe < rc\" = \"#f8766d\"), guide=F) \n      }else{\n        par(family=\"NovaMono\")\n        plot(1:10, 1:10, pch=\"\", bty=\"n\", yaxt=\"n\", xaxt=\"n\", ylab=\"\", xlab=\"\")\n        text(5, y=6, \"Sample size cannot be calculated under\", cex=1.3)\n        text(5, y=5, \"this combination of parameters.\", cex=1.3)\n      }\n    }else{\n      par(family=\"NovaMono\")\n      plot(1:10, 1:10, bty=\"n\", xaxt=\"n\", yaxt=\"n\", pch=\"\", ylab=\"\", xlab=\"\")\n      text(5, y=6, \"Sample size cannot be calculated under\", cex=1.3)\n      text(5, y=5, \"this combination of parameters.\", cex=1.3)\n    }\n  })\n\n  output$sliderInputP <- renderUI({\n    if( input$L_P >= 2 ){\n      Pmin <- max(.1, floor(N2p(2*input$L_P, rc=input$rc_P, input$L_P)))\n      Pmax <- min(.99, ceiling(N2p(250*input$L_P, rc=input$L_P)))\n      sliderInput(\"sliderInputP\", label=\"Acceptable good-randomization rate\", \n                  min=Pmin, max=Pmax, value=round((Pmax+Pmin)/2, 2), step=0.001)\n    }else{\n    }\n  })\n  \n  output$N <- renderText({\n    if( length(input$sliderInputP)==0 | input$L_P<2 ){\n    }else{\n      ceiling(q2N(input$sliderInputP, input$rc_P, input$L_P)/input$L_P)\n    }\n  })\n})\n",
    "created" : 1415204996898.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2420117731",
    "id" : "D7870018",
    "lastKnownWriteTime" : 1417151045,
    "path" : "~/work/shiny/equality/Demonstration/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}
{
    "contents" : "library(shiny)\nlibrary(ggplot2)\nlibrary(magrittr)\nlibrary(grid)\n\nshinyServer(function(input, output) {\n  # Global variable to control fallback\n  IsRunning <- TRUE\n  # Plot\n  output$distPlot <- renderPlot({\n    input$RUN\n    R <- switch(isolate(input$R), \"1\"=100, \"2\"=500, \"3\"=1000)\n    nsub <- isolate(input$N)\n    L <- isolate(input$L)\n    rc <- isolate(input$rc)\n    if( L < 2 ){\n      playout <- grid.layout(2, 1, unit(1, \"npc\"), unit(c(.1, .9), \"npc\"))\n      pushViewport(viewport(layout=playout))\n      pushViewport(viewport(layout.pos.row=1, layout.pos.col=1))\n      grid.text(\"The number of experimental condition should greater than 2.\", x=.4,\n                gp=gpar(fontfamily=\"sans\", col=\"red\", cex=1.2))\n      IsRunning <<- FALSE\n    }else{\n      g <- as.factor(rep(1:L, nsub))\n      dm <- model.matrix(~g)[, 1:nlevels(g)]\n      rxe <- matrix(rep(NA, R), R, 1)\n      for( r in 1:R ){\n        y <- rnorm(nsub*L, 0, 1)\n        rxe[r] <- sqrt(1-var(residuals(.lm.fit(dm, y)))/var(y))\n      }\n      pvalue <<- round(1 - mean(rxe>=rc), 3)\n      IsRunning <<- FALSE\n      dat <- ifelse(rxe<rc, \"rxe<rc\", \"rxe>=rc\") %>% data.frame(rxe=rxe, Result=.)\n      #dat <- data.frame(rxe=rxe, success=rxe<=rc)\n      ypos <- cut(dat$rxe, seq(min(dat$rxe), max(dat$rxe), .01)) %>% table %>% max * 1.1 \n      gl <- grid.layout(nrow=2, ncol=1, heights=unit(c(.1, .9), \"npc\"))\n      pushViewport(viewport(layout=gl))\n      pushViewport(viewport(layout.pos.col=1, layout.pos.row=1))\n      grid.text(\"The probability of successful randomization is\", x=.28,\n                y=.5, gp=gpar(fontsize=unit(12, \"npc\"), cex=1.2))\n      grid.text(sprintf(\"%.2f\", pvalue), x=.56, y=.5, \n                gp=gpar(fontsize=unit(15, \"npc\"), col=\"red\", cex=1.2))\n      popViewport()\n      gplot <- ggplot(dat, aes(x=rxe, fill=Result)) + \n                      geom_histogram(binwidth=.01, colour=\"black\", size=rel(.3)) + \n                      xlab(expression(r[x*epsilon])) +\n                      theme(text=element_text(family=\"NovaMono\", size=rel(4)), \n                            legend.text=element_text(size=rel(4)),\n                            legend.title=element_text(size=rel(3.7))) + \n                      scale_fill_manual(values=c(\"rxe>=rc\"=\"#f8766d\", \"rxe<rc\"=\"#00bfc4\"), \n                                        labels=expression(r[x*epsilon]<r[c],r[x*epsilon]>=r[c]))\n      print(gplot, vp=viewport(layout.pos.col=1, layout.pos.row=2))\n    }\n  })\n  #output$pvalue <- renderText({\n  #  input$RUN\n  #  while(IsRunning){\n  #    #Sys.sleep(1)\n  #  }\n  #  IsRunning <<- TRUE\n  #  return(pvalue)\n  #})\n})\n",
    "created" : 1417125863906.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "820028501",
    "id" : "9DFFF338",
    "lastKnownWriteTime" : 1417154229,
    "path" : "/mnt/files/owncloud/EQuality/EQuality_Shiny/Simulation/server.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}